From 3bf040c75294ad9470b11902477e2c07af2031bd Mon Sep 17 00:00:00 2001
From: Minchan Kim <minchan.kim@gmail.com>
Date: Mon, 11 Jan 2010 07:15:53 +0000
Subject: Staging: ramzswap: Free memory when create_device is failed

If create_device is failed, it can't free gendisk and request_queue of
preceding devices. It cause memory leak.

This patch fixes it.

Signed-off-by: Minchan Kim <minchan.kim@gmail.com>
Acked-by: Nitin Gupta <ngupta@vflare.org>
Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>

---
diff --git a/drivers/staging/ramzswap/ramzswap_drv.c b/drivers/staging/ramzswap/ramzswap_drv.c
index 7a7ead4..baf7572 100644
--- a/drivers/staging/ramzswap/ramzswap_drv.c
+++ b/drivers/staging/ramzswap/ramzswap_drv.c
@@ -1292,7 +1292,7 @@ static struct block_device_operations ramzswap_devops = {
 	.owner = THIS_MODULE,
 };
 
-static void create_device(struct ramzswap *rzs, int device_id)
+static int create_device(struct ramzswap *rzs, int device_id)
 {
 	mutex_init(&rzs->lock);
 	INIT_LIST_HEAD(&rzs->backing_swap_extent_list);
@@ -1301,7 +1301,7 @@ static void create_device(struct ramzswap *rzs, int device_id)
 	if (!rzs->queue) {
 		pr_err("Error allocating disk queue for device %d\n",
 			device_id);
-		return;
+		return 0;
 	}
 
 	blk_queue_make_request(rzs->queue, ramzswap_make_request);
@@ -1313,7 +1313,7 @@ static void create_device(struct ramzswap *rzs, int device_id)
 		blk_cleanup_queue(rzs->queue);
 		pr_warning("Error allocating disk structure for device %d\n",
 			device_id);
-		return;
+		return 0;
 	}
 
 	rzs->disk->major = ramzswap_major;
@@ -1331,6 +1331,7 @@ static void create_device(struct ramzswap *rzs, int device_id)
 	add_disk(rzs->disk);
 
 	rzs->init_done = 0;
+	return 1;
 }
 
 static void destroy_device(struct ramzswap *rzs)
@@ -1368,16 +1369,20 @@ static int __init ramzswap_init(void)
 	/* Allocate the device array and initialize each one */
 	pr_info("Creating %u devices ...\n", num_devices);
 	devices = kzalloc(num_devices * sizeof(struct ramzswap), GFP_KERNEL);
-	if (!devices) {
-		ret = -ENOMEM;
+	if (!devices)
 		goto out;
-	}
 
 	for (i = 0; i < num_devices; i++)
-		create_device(&devices[i], i);
-
+		if (!create_device(&devices[i], i)) {
+			ret = i;
+			goto free_devices;
+		}
 	return 0;
+free_devices:
+	for (i = 0; i < ret; i++)
+		destroy_device(&devices[i]);
 out:
+	ret = -ENOMEM;
 	unregister_blkdev(ramzswap_major, "ramzswap");
 	return ret;
 }
--
cgit v0.9.2
